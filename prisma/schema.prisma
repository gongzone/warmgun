generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique
  username  String   @unique
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth_session        Session[]
  key                 Key[]
  role                UserRole             @default(USER)
  profile             UserProfile?
  followers           UserFollow[]         @relation("Followee")
  followees           UserFollow[]         @relation("Follower")
  drafts              Draft[]
  articles            Article[]
  articleLikes        ArticleLike[]
  articleComments     ArticleComment[]
  articleCommentLikes ArticleCommentLike[]
  tagFollows          ArticleTagFollow[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

enum UserRole {
  USER
  ADMIN
}

model UserProfile {
  id          Int      @id @default(autoincrement())
  displayName String   @unique
  avatar      String?
  who         String?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profileLinks UserProfileLinks?
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String            @unique
}

model UserProfileLinks {
  id        Int      @id @default(autoincrement())
  website   String?
  github    String?
  instagram String?
  facebook  String?
  x         String?
  youtube   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int         @unique
}

model UserFollow {
  follower   User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  followee   User     @relation("Followee", fields: [followeeId], references: [id], onDelete: Cascade)
  followeeId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([followerId, followeeId])
}

model Draft {
  id        Int      @id @default(autoincrement())
  title     String?
  body      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Article {
  id            Int      @id @default(autoincrement())
  title         String
  body          Json
  excerpt       String
  thumbnail     String?
  slug          String   @unique
  readingTime   Int      @default(0)
  trendingScore Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  likedBy  ArticleLike[]
  comments ArticleComment[]
  tags     ArticleTag[]
}

model ArticleLike {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, articleId])
}

model ArticleComment {
  id        Int      @id @default(autoincrement())
  text      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  article         Article              @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId       Int
  parentComment   ArticleComment?      @relation("NestedArticleComments", fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId Int?
  childComments   ArticleComment[]     @relation("NestedArticleComments")
  likedBy         ArticleCommentLike[]
}

model ArticleCommentLike {
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   ArticleComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@id([userId, commentId])
}

model ArticleTag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles   Article[]
  followedBy ArticleTagFollow[]
}

model ArticleTagFollow {
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  tag       ArticleTag @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@id([userId, tagId])
}
