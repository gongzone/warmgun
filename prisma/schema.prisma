generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role         Role          @default(USER)
  profile      Profile?
  tokens       Token[]
  drafts       Draft[]
  articles     Article[]
  comments     Comment[]
  likes        Like[]
  tagLikes     TagLike[]
  commentLikes CommentLike[]
  followedBy   Follows[]     @relation("following")
  following    Follows[]     @relation("follower")
}

enum Role {
  USER
  ADMIN
}

model Profile {
  id        Int     @id @default(autoincrement())
  nickname  String  @unique
  field     String  @default("")
  bio       String  @default("")
  avatar    String?
  blogImage String?

  profileLinks ProfileLinks?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int           @unique
}

model ProfileLinks {
  id        Int    @id @default(autoincrement())
  website   String @default("")
  github    String @default("")
  instagram String @default("")
  facebook  String @default("")
  twitter   String @default("")
  youtube   String @default("")

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int     @unique
}

model Token {
  id           String   @id @default(cuid())
  refreshToken String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique(fields: [id, userId], name: "id_userId")
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}

model Draft {
  id        Int      @id @default(autoincrement())
  title     String   @default("")
  body      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int
}

model Article {
  id            Int      @id @default(autoincrement())
  title         String
  excerpt       String
  body          Json
  coverImage    String?
  slug          String   @unique
  readingTime   Int      @default(0)
  trendingScore Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  genre    Genre     @default(ETC)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int
  comments Comment[]
  tags     Tag[]
  likes    Like[]

  @@unique(fields: [id, authorId], name: "id_authorId")
}

enum Genre {
  FRONTEND
  BACKEND
  DEVOPS
  MOBILE
  DATA_SCIENCE
  GAME
  ETC
}

model Like {
  id Int @id @default(autoincrement())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int

  @@unique(fields: [userId, articleId], name: "userId_articleId")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  article   Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  parent    Comment?      @relation("NestedComments", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  Int?
  children  Comment[]     @relation("NestedComments")
  likes     CommentLike[]
}

model CommentLike {
  id Int @id @default(autoincrement())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@unique(fields: [userId, commentId], name: "userId_commentId")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
  slug String @unique

  articles Article[]
  tagLikes TagLike[]
}

model TagLike {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  Int

  @@unique(fields: [userId, tagId], name: "userId_tagId")
}
